"""
AI Learning Platform - FastAPI Backend
–í–µ–±-—Å–µ—Ä–≤–∏—Å –¥–ª—è –æ–±—É—á–µ–Ω–∏—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–º –Ω–∞–≤—ã–∫–∞–º —Å AI
"""

from fastapi import FastAPI, WebSocket, WebSocketDisconnect, Depends, HTTPException, status
from fastapi.middleware.cors import CORSMiddleware
from fastapi.security import HTTPBearer, HTTPAuthorizationCredentials
from contextlib import asynccontextmanager
import uvicorn
import logging
from typing import List, Dict, Any
import json
import os
from datetime import datetime

from models.database import create_tables, get_db, check_database_connection
from routers import auth, tracks, chat, ai_service
from services.chat_service import chat_manager
from utils.config import settings

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
@asynccontextmanager
async def lifespan(app: FastAPI):
    # –ó–∞–ø—É—Å–∫
    try:
        await create_tables()
        logger.info("Database tables created")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î
        await check_database_connection()
        
    except Exception as e:
        logger.error(f"Failed to initialize database: {e}")
        
    yield
    # –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ
    logger.info("Application shutdown")

# –°–æ–∑–¥–∞–Ω–∏–µ FastAPI –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
app = FastAPI(
    title="AI Learning Platform API",
    description="–í–µ–±-—Å–µ—Ä–≤–∏—Å –¥–ª—è –æ–±—É—á–µ–Ω–∏—è —Å AI - Backend API",
    version="1.0.0",
    lifespan=lifespan
)

# CORS –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –æ—Ç–¥–µ–ª—å–Ω—ã–º frontend
cors_origins = [
    "http://localhost:3000",  # Vite dev server
    "http://localhost:3001",  # –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –ø–æ—Ä—Ç Vite (–∫–æ–≥–¥–∞ 3000 –∑–∞–Ω—è—Ç)
    "http://127.0.0.1:3000",
    "http://127.0.0.1:3001",
    "http://192.168.1.3:3000",  # IP –∞–¥—Ä–µ—Å –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–π —Å–µ—Ç–∏
    "http://192.168.1.3:3001",  # IP –∞–¥—Ä–µ—Å –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–π —Å–µ—Ç–∏ (–∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –ø–æ—Ä—Ç)
    "http://192.168.64.1:3000",  # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π IP –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–π —Å–µ—Ç–∏
    "http://192.168.64.1:3001", # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π IP –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–π —Å–µ—Ç–∏ (–∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –ø–æ—Ä—Ç)
    "http://localhost:5173",  # –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –ø–æ—Ä—Ç Vite
    "http://127.0.0.1:5173",
    "http://192.168.1.3:5173",
    "http://192.168.64.1:5173",
    *settings.cors_origins     # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ origins –∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫
]

# –õ–æ–≥–∏—Ä—É–µ–º CORS –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
logger.info(f"üåê Configured CORS origins: {cors_origins}")

app.add_middleware(
    CORSMiddleware,
    allow_origins=cors_origins,
    allow_credentials=True,
    allow_methods=["GET", "POST", "PUT", "DELETE", "OPTIONS", "PATCH"],
    allow_headers=["*"],
)

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —Ä–æ—É—Ç–µ—Ä–æ–≤
app.include_router(auth.router, prefix="/api/auth", tags=["authentication"])
app.include_router(tracks.router, prefix="/api/tracks", tags=["learning_tracks"])
app.include_router(chat.router, prefix="/api/chat", tags=["chat"])
app.include_router(ai_service.router, prefix="/api/ai", tags=["ai_service"])

# API –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
@app.get("/api")
async def api_info():
    """–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± API"""
    return {
        "message": "AI Learning Platform API",
        "version": "1.0.0",
        "docs": "/docs",
        "frontend": "http://localhost:3000"
    }

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è API
@app.get("/api/health")
async def health_check():
    return {"status": "healthy", "service": "ai-learning-platform"}

# WebSocket –¥–ª—è —á–∞—Ç–∞ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π chat_id
@app.websocket("/ws/chat/{session_id}")
async def websocket_chat(websocket: WebSocket, session_id: str):
    """WebSocket endpoint –¥–ª—è —á–∞—Ç–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –∫—É—Ä—Å–∞ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π chat_id"""
    await chat_manager.connect(websocket, session_id)
    logger.info(f"WebSocket connected for session: {session_id}")
    
    try:
        while True:
            # –ü–æ–ª—É—á–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞
            data = await websocket.receive_text()
            message_data = json.loads(data)
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
            user_message = message_data.get("message", "")
            user_id = message_data.get("user_id", "")
            message_type = message_data.get("type", "text")
            chat_id = message_data.get("chat_id")  # –ù–æ–≤–æ–µ –ø–æ–ª–µ –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏ chat_id
            
            # –õ–æ–≥–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            logger.info(f"Received message in session {session_id}, chat_id: {chat_id}, user: {user_id}, type: {message_type}")
            
            # –ü–æ–ª—É—á–∞–µ–º —Å–µ—Å—Å–∏—é –ë–î
            db_gen = get_db()
            db = await db_gen.__anext__()
            
            try:
                # –°–ø–µ—Ü–∏–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏
                if message_type == "restore_chat":
                    result = await chat_manager.restore_existing_chat_if_any(
                        session_id=session_id,
                        user_id=user_id,
                        db=db
                    )
                    
                    response = {
                        "type": "chat_restored",
                        "session_id": session_id,
                        "success": result["success"],
                        "has_existing_chat": result["has_existing_chat"],
                        "chat_id": result.get("chat_id"),
                        "chat_info": result.get("chat_info"),
                        "history": result.get("history", []),
                        "message_count": result.get("message_count", 0),
                        "timestamp": datetime.utcnow().isoformat()
                    }
                    
                    await websocket.send_text(json.dumps(response))
                    logger.info(f"Restored chat for session {session_id}: {result['has_existing_chat']} existing, {result.get('message_count', 0)} messages")
                    continue
            
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è –¥–ª—è –æ–±—ã—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
                if not user_message.strip():
                    error_response = {
                        "type": "error",
                        "message": "–°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º",
                        "session_id": session_id,
                        "chat_id": chat_id,
                        "timestamp": None
                    }
                    await websocket.send_text(json.dumps(error_response))
                    continue
                
                if not user_id:
                    error_response = {
                        "type": "error",
                        "message": "–ù–µ —É–∫–∞–∑–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å",
                        "session_id": session_id,
                        "chat_id": chat_id,
                        "timestamp": None
                    }
                    await websocket.send_text(json.dumps(error_response))
                    continue

                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ–±—ã—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —á–µ—Ä–µ–∑ AI —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –≤ –ë–î
                await chat_manager.process_message(
                    session_id=session_id,
                    message=user_message,
                    user_id=user_id,
                    db=db,
                    message_type=message_type,
                    chat_id=chat_id
                )
                
                logger.info(f"Processed message for session {session_id}, chat_id: {chat_id}")
                
            except Exception as e:
                logger.error(f"Error processing message in session {session_id}: {str(e)}")
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
                error_response = {
                    "type": "error",
                    "message": f"üö´ –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {str(e)}",
                    "session_id": session_id,
                    "chat_id": chat_id,
                    "timestamp": None
                }
                await websocket.send_text(json.dumps(error_response))
                
            finally:
                # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–µ—Å—Å–∏—é –ë–î
                await db.close()

    except WebSocketDisconnect:
        chat_manager.disconnect(session_id)
        logger.info(f"WebSocket disconnected for session: {session_id}")
    except json.JSONDecodeError:
        logger.error(f"Invalid JSON received in session {session_id}")
        try:
            error_response = {
                "type": "error",
                "message": "üö´ –ü–æ–ª—É—á–µ–Ω—ã –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ",
                "session_id": session_id,
                "timestamp": None
            }
            await websocket.send_text(json.dumps(error_response))
        except:
            pass
    except Exception as e:
        logger.error(f"WebSocket error in session {session_id}: {str(e)}")
        try:
            error_response = {
                "type": "error",
                "message": f"üö´ –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è: {str(e)}",
                "session_id": session_id,
                "timestamp": None
            }
            await websocket.send_text(json.dumps(error_response))
        except:
            pass
        finally:
            await websocket.close()

# –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π WebSocket endpoint –¥–ª—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —á–∞—Ç–æ–≤
@app.websocket("/ws/chat/{session_id}/switch")
async def websocket_switch_chat(websocket: WebSocket, session_id: str):
    """WebSocket endpoint –¥–ª—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –º–µ–∂–¥—É —á–∞—Ç–∞–º–∏ –∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏"""
    await chat_manager.connect(websocket, f"{session_id}_switch")
    logger.info(f"WebSocket switch connected for session: {session_id}")
    
    try:
        while True:
            # –ü–æ–ª—É—á–∞–µ–º –∫–æ–º–∞–Ω–¥—É –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è
            data = await websocket.receive_text()
            command_data = json.loads(data)
            
            command_type = command_data.get("command", "")
            user_id = command_data.get("user_id", "")
            
            # –ü–æ–ª—É—á–∞–µ–º —Å–µ—Å—Å–∏—é –ë–î
            db_gen = get_db()
            db = await db_gen.__anext__()
            
            try:
                if command_type == "switch_chat":
                    # –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π —á–∞—Ç
                    chat_id = command_data.get("chat_id")
                    if chat_id:
                        result = await chat_manager.switch_to_chat(
                            session_id=session_id,
                            chat_id=chat_id,
                            user_id=user_id,
                            db=db
                        )
                        
                        response = {
                            "type": "chat_switched",
                            "session_id": session_id,
                            "chat_id": chat_id,
                            "success": result["success"],
                            "chat_info": result.get("chat_info", {}),
                            "history": result.get("history", []),
                            "message_count": result.get("message_count", 0)
                        }
                        
                        await websocket.send_text(json.dumps(response))
                        
                elif command_type == "get_user_chats":
                    # –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö —á–∞—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                    user_chats = await chat_manager.get_all_user_chats(user_id, session_id, db)
                    
                    response = {
                        "type": "user_chats",
                        "session_id": session_id,
                        "chats": user_chats
                    }
                    
                    await websocket.send_text(json.dumps(response))
                    
                elif command_type == "restore_history":
                    # –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —á–∞—Ç–∞
                    chat_id = command_data.get("chat_id")
                    if chat_id:
                        history = await chat_manager.restore_chat_history(
                            session_id=session_id,
                            chat_id=chat_id,
                            user_id=user_id,
                            db=db
                        )
                        
                        response = {
                            "type": "history_restored",
                            "session_id": session_id,
                            "chat_id": chat_id,
                            "history": history,
                            "message_count": len(history)
                        }
                        
                        await websocket.send_text(json.dumps(response))
                        
                else:
                    # –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞
                    error_response = {
                        "type": "error",
                        "message": f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞: {command_type}",
                        "session_id": session_id
                    }
                    await websocket.send_text(json.dumps(error_response))
                    
            except Exception as e:
                logger.error(f"Error processing switch command: {str(e)}")
                error_response = {
                    "type": "error",
                    "message": f"–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã: {str(e)}",
                    "session_id": session_id
                }
                await websocket.send_text(json.dumps(error_response))
                
            finally:
                await db.close()

    except WebSocketDisconnect:
        chat_manager.disconnect(f"{session_id}_switch")
        logger.info(f"WebSocket switch disconnected for session: {session_id}")
    except Exception as e:
        logger.error(f"WebSocket switch error: {str(e)}")
        await websocket.close()

if __name__ == "__main__":
    uvicorn.run(
        "main:app",
        host="0.0.0.0",
        port=8000,
        reload=True,
        log_level="info"
    )
