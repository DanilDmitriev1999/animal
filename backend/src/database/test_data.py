#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç—ã —Å –¥–∞–Ω–Ω—ã–º–∏ AI Learning Platform
–î–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç –æ—Å–Ω–æ–≤–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ —Å –ë–î —á–µ—Ä–µ–∑ psycopg2
"""

import psycopg2
from psycopg2.extras import RealDictCursor
import os


def get_connection():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î"""
    return psycopg2.connect(
        host=os.getenv('DB_HOST', 'localhost'),
        port=os.getenv('DB_PORT', '5432'),
        database=os.getenv('DB_NAME', 'ai_learning_db'),
        user=os.getenv('DB_USER', 'user'),
        password=os.getenv('DB_PASSWORD', 'password')
    )


def test_users_table():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    print("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã users...")
    
    conn = get_connection()
    cursor = conn.cursor(cursor_factory=RealDictCursor)
    
    # –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    cursor.execute("""
        SELECT id, email, first_name, last_name, role, ai_personality, 
               created_at, is_active 
        FROM users
    """)
    users = cursor.fetchall()
    
    print(f"  –ù–∞–π–¥–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(users)}")
    for user in users:
        print(f"    ‚Ä¢ ID: {user['id']}, Email: {user['email']}, "
              f"–ò–º—è: {user['first_name']} {user['last_name']}, "
              f"–†–æ–ª—å: {user['role']}, AI —Å—Ç–∏–ª—å: {user['ai_personality']}")
    
    cursor.close()
    conn.close()


def test_tracks_and_modules():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü —Ç—Ä–µ–∫–æ–≤ –∏ –º–æ–¥—É–ª–µ–π"""
    print("\nüîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü tracks –∏ modules...")
    
    conn = get_connection()
    cursor = conn.cursor(cursor_factory=RealDictCursor)
    
    # –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç—Ä–µ–∫–æ–≤ —Å –º–æ–¥—É–ª—è–º–∏
    cursor.execute("""
        SELECT 
            t.id as track_id,
            t.title as track_title,
            t.difficulty_level,
            t.estimated_duration_hours,
            m.id as module_id,
            m.title as module_title,
            m.order_index
        FROM tracks t
        LEFT JOIN modules m ON t.id = m.track_id
        ORDER BY t.id, m.order_index
    """)
    results = cursor.fetchall()
    
    # –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –ø–æ —Ç—Ä–µ–∫–∞–º
    tracks_data = {}
    for row in results:
        track_id = row['track_id']
        if track_id not in tracks_data:
            tracks_data[track_id] = {
                'title': row['track_title'],
                'difficulty': row['difficulty_level'],
                'duration': row['estimated_duration_hours'],
                'modules': []
            }
        
        if row['module_id']:
            tracks_data[track_id]['modules'].append({
                'id': row['module_id'],
                'title': row['module_title'],
                'order': row['order_index']
            })
    
    print(f"  –ù–∞–π–¥–µ–Ω–æ —Ç—Ä–µ–∫–æ–≤: {len(tracks_data)}")
    for track_id, track in tracks_data.items():
        print(f"    ‚Ä¢ –¢—Ä–µ–∫ {track_id}: {track['title']} "
              f"(—É—Ä–æ–≤–µ–Ω—å {track['difficulty']}, {track['duration']}—á)")
        for module in track['modules']:
            print(f"      - –ú–æ–¥—É–ª—å {module['order']}: {module['title']}")
    
    cursor.close()
    conn.close()


def test_lessons():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã —É—Ä–æ–∫–æ–≤"""
    print("\nüîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã lessons...")
    
    conn = get_connection()
    cursor = conn.cursor(cursor_factory=RealDictCursor)
    
    cursor.execute("""
        SELECT 
            l.id,
            l.title,
            l.lesson_type,
            l.estimated_minutes,
            l.order_index,
            m.title as module_title,
            t.title as track_title
        FROM lessons l
        JOIN modules m ON l.module_id = m.id
        JOIN tracks t ON m.track_id = t.id
        ORDER BY t.id, m.order_index, l.order_index
    """)
    lessons = cursor.fetchall()
    
    print(f"  –ù–∞–π–¥–µ–Ω–æ —É—Ä–æ–∫–æ–≤: {len(lessons)}")
    for lesson in lessons:
        print(f"    ‚Ä¢ {lesson['track_title']} ‚Üí {lesson['module_title']} ‚Üí "
              f"{lesson['title']} ({lesson['lesson_type']}, {lesson['estimated_minutes']}–º–∏–Ω)")
    
    cursor.close()
    conn.close()


def test_chat_functionality():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞ —á–∞—Ç–∞"""
    print("\nüîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞ chat_messages...")
    
    conn = get_connection()
    cursor = conn.cursor(cursor_factory=RealDictCursor)
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    test_messages = [
        {
            'user_id': 1,
            'session_id': 'test-session-123',
            'agent_type': 'dashboard',
            'context_data': '{"screen": "dashboard"}',
            'role': 'user',
            'content': '–ü—Ä–∏–≤–µ—Ç! –ü–æ–∫–∞–∂–∏ –º–Ω–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∫—É—Ä—Å—ã'
        },
        {
            'user_id': 1,
            'session_id': 'test-session-123',
            'agent_type': 'dashboard',
            'context_data': '{"screen": "dashboard"}',
            'role': 'assistant',
            'content': '–ü—Ä–∏–≤–µ—Ç! –í–æ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ç—Ä–µ–∫–∏: –û—Å–Ω–æ–≤—ã Python, –ú–∞—à–∏–Ω–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ, –í–µ–±-—Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞'
        },
        {
            'user_id': 1,
            'session_id': 'course-session-456',
            'agent_type': 'course',
            'context_data': '{"course_id": 1, "lesson_id": 1}',
            'role': 'user',
            'content': '–û–±—ä—è—Å–Ω–∏ —á—Ç–æ —Ç–∞–∫–æ–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –≤ Python'
        }
    ]
    
    for msg in test_messages:
        cursor.execute("""
            INSERT INTO chat_messages 
            (user_id, session_id, agent_type, context_data, role, content)
            VALUES (%(user_id)s, %(session_id)s, %(agent_type)s, 
                    %(context_data)s::jsonb, %(role)s, %(content)s)
        """, msg)
    
    conn.commit()
    
    # –ü–æ–ª—É—á–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ —á–∞—Ç–∞
    cursor.execute("""
        SELECT session_id, agent_type, role, content, created_at,
               context_data
        FROM chat_messages
        ORDER BY created_at
    """)
    messages = cursor.fetchall()
    
    print(f"  –î–æ–±–∞–≤–ª–µ–Ω–æ –∏ –Ω–∞–π–¥–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {len(messages)}")
    for msg in messages:
        print(f"    ‚Ä¢ [{msg['session_id']}] {msg['agent_type']} - "
              f"{msg['role']}: {msg['content'][:50]}...")
    
    cursor.close()
    conn.close()


def test_user_progress():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    print("\nüîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ user_progress...")
    
    conn = get_connection()
    cursor = conn.cursor(cursor_factory=RealDictCursor)
    
    # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –¥–ª—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    test_progress = [
        {'user_id': 1, 'lesson_id': 1, 'is_completed': True, 'completion_percentage': 100, 'time_spent_minutes': 35},
        {'user_id': 1, 'lesson_id': 2, 'is_completed': False, 'completion_percentage': 60, 'time_spent_minutes': 25},
        {'user_id': 1, 'lesson_id': 3, 'is_completed': False, 'completion_percentage': 0, 'time_spent_minutes': 0}
    ]
    
    for progress in test_progress:
        cursor.execute("""
            INSERT INTO user_progress 
            (user_id, lesson_id, is_completed, completion_percentage, time_spent_minutes)
            VALUES (%(user_id)s, %(lesson_id)s, %(is_completed)s, 
                    %(completion_percentage)s, %(time_spent_minutes)s)
            ON CONFLICT (user_id, lesson_id) DO UPDATE SET
                is_completed = EXCLUDED.is_completed,
                completion_percentage = EXCLUDED.completion_percentage,
                time_spent_minutes = EXCLUDED.time_spent_minutes
        """, progress)
    
    conn.commit()
    
    # –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ–± —É—Ä–æ–∫–∞—Ö
    cursor.execute("""
        SELECT 
            up.completion_percentage,
            up.is_completed,
            up.time_spent_minutes,
            l.title as lesson_title,
            m.title as module_title,
            t.title as track_title
        FROM user_progress up
        JOIN lessons l ON up.lesson_id = l.id
        JOIN modules m ON l.module_id = m.id
        JOIN tracks t ON m.track_id = t.id
        WHERE up.user_id = 1
        ORDER BY t.id, m.order_index, l.order_index
    """)
    progress_data = cursor.fetchall()
    
    print(f"  –ù–∞–π–¥–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π –ø—Ä–æ–≥—Ä–µ—Å—Å–∞: {len(progress_data)}")
    for progress in progress_data:
        status = "‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω" if progress['is_completed'] else f"‚è≥ {progress['completion_percentage']}%"
        print(f"    ‚Ä¢ {progress['track_title']} ‚Üí {progress['lesson_title']}: "
              f"{status} ({progress['time_spent_minutes']}–º–∏–Ω)")
    
    cursor.close()
    conn.close()


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞–±–æ—Ç—ã —Å –¥–∞–Ω–Ω—ã–º–∏ AI Learning Platform")
    print("=" * 60)
    
    try:
        test_users_table()
        test_tracks_and_modules()
        test_lessons()
        test_chat_functionality()
        test_user_progress()
        
        print("\nüéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ!")
        print("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ")
        
    except Exception as e:
        print(f"\n‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏: {e}")
        return False
    
    return True


if __name__ == "__main__":
    main() 