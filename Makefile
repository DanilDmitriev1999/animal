# AI Learning Platform - Makefile

.PHONY: help install setup-env db-up db-down dev clean test frontend-install frontend-dev frontend-build

help: ## –ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–º–æ—â—å
	@echo "AI Learning Platform - –ö–æ–º–∞–Ω–¥—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è"
	@echo ""
	@echo "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: make [–∫–æ–º–∞–Ω–¥–∞]"
	@echo ""
	@echo "Backend –∫–æ–º–∞–Ω–¥—ã:"
	@grep -E '^[a-zA-Z_-]+:.*?## .*$$' $(MAKEFILE_LIST) | sort | awk 'BEGIN {FS = ":.*?## "}; {printf "  %-20s %s\n", $$1, $$2}'

install: ## –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ Python (backend)
	pip install -r requirements.txt

frontend-install: ## –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ Node.js (frontend)
	cd frontend && npm install

setup-env: ## –°–æ–∑–¥–∞—Ç—å .env —Ñ–∞–π–ª –∏–∑ –ø—Ä–∏–º–µ—Ä–∞
	@if [ ! -f .env ]; then \
		cp env.example .env; \
		echo "‚úÖ –§–∞–π–ª .env —Å–æ–∑–¥–∞–Ω –∏–∑ env.example"; \
		echo "üîß –ù–∞—Å—Ç—Ä–æ–π—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –≤ —Ñ–∞–π–ª–µ .env"; \
	else \
		echo "‚ö†Ô∏è  –§–∞–π–ª .env —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç"; \
	fi

db-up: ## –ó–∞–ø—É—Å—Ç–∏—Ç—å PostgreSQL —á–µ—Ä–µ–∑ Docker
	docker compose up -d db
	@echo "‚è≥ –ñ–¥–µ–º –∑–∞–ø—É—Å–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö..."
	@sleep 10
	@echo "‚úÖ PostgreSQL –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É 5432"
	@echo "üìä –î–∞–Ω–Ω—ã–µ –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:"
	@echo "   Host: localhost:5432"
	@echo "   Database: ai_learning_platform"
	@echo "   User: user"
	@echo "   Password: password"

db-down: ## –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å PostgreSQL
	docker compose down
	@echo "‚úÖ PostgreSQL –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"

dev: ## –ó–∞–ø—É—Å—Ç–∏—Ç—å FastAPI backend —Å–µ—Ä–≤–µ—Ä
	@echo "üöÄ –ó–∞–ø—É—Å–∫ AI Learning Platform Backend..."
	@echo "üì° API —Å–µ—Ä–≤–µ—Ä: http://localhost:8000"
	@echo "üìö API –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è: http://localhost:8000/docs"
	@echo "‚ö†Ô∏è  –î–ª—è –∑–∞–ø—É—Å–∫–∞ frontend –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ: make frontend-dev"
	uvicorn main:app --reload --host 0.0.0.0 --port 8000

frontend-dev: ## –ó–∞–ø—É—Å—Ç–∏—Ç—å Vite frontend —Å–µ—Ä–≤–µ—Ä
	@echo "üåê –ó–∞–ø—É—Å–∫ AI Learning Platform Frontend..."
	@echo "üñ•Ô∏è  Frontend: http://localhost:3000"
	@echo "‚ö†Ô∏è  –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ backend –∑–∞–ø—É—â–µ–Ω: make dev"
	cd frontend && npm run dev

frontend-build: ## –°–æ–±—Ä–∞—Ç—å frontend –¥–ª—è –ø—Ä–æ–¥–∞–∫—à–µ–Ω–∞
	@echo "üèóÔ∏è  –°–±–æ—Ä–∫–∞ frontend..."
	cd frontend && npm run build
	@echo "‚úÖ Frontend —Å–æ–±—Ä–∞–Ω –≤ frontend/dist/"

create-tables: ## –°–æ–∑–¥–∞—Ç—å —Ç–∞–±–ª–∏—Ü—ã –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
	python -c "from models.database import create_tables; import asyncio; asyncio.run(create_tables())"

clean: ## –û—á–∏—Å—Ç–∏—Ç—å –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
	find . -type f -name "*.pyc" -delete
	find . -type d -name "__pycache__" -delete
	find . -type d -name "*.egg-info" -exec rm -rf {} +
	cd frontend && rm -rf dist node_modules/.vite

migrate-chat-id: ## –ú–∏–≥—Ä–∏—Ä–æ–≤–∞—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –ë–î –∫ —Å—Ç—Ä—É–∫—Ç—É—Ä–µ —Å chat_id
	@echo "üîÑ –ó–∞–ø—É—Å–∫ –º–∏–≥—Ä–∞—Ü–∏–∏ –∫ chat_id..."
	docker exec -i ai-learning-platform-db-1 psql -U user -d ai_learning_platform < migrate_to_chat_id.sql
	@echo "‚úÖ –ú–∏–≥—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!"

migrate: ## –ó–∞–ø—É—Å—Ç–∏—Ç—å –º–∏–≥—Ä–∞—Ü–∏–∏ (–µ—Å–ª–∏ –µ—Å—Ç—å)
	$(MAKE) migrate-chat-id

stop-all: ## –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤—Å–µ —Å–µ—Ä–≤–∏—Å—ã
	@echo "üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤..."
	@-pkill -f "uvicorn main:app" 2>/dev/null || true
	@-pkill -f "npm run dev" 2>/dev/null || true
	@-pkill -f "vite" 2>/dev/null || true
	docker compose down
	@echo "‚úÖ –í—Å–µ —Å–µ—Ä–≤–∏—Å—ã –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã"

db-reset-force: ## –ü–µ—Ä–µ—Å–æ–∑–¥–∞—Ç—å –ë–î –±–µ–∑ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è (–û–°–¢–û–†–û–ñ–ù–û!)
	@echo "üóëÔ∏è  –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –ø–µ—Ä–µ—Å–æ–∑–¥–∞–Ω–∏–µ –ë–î..."
	docker compose down -v
	docker volume prune -f
	$(MAKE) db-up
	$(MAKE) create-tables
	@echo "‚úÖ –ë–î –ø–µ—Ä–µ—Å–æ–∑–¥–∞–Ω–∞"

setup-new-env: ## –°–æ–∑–¥–∞—Ç—å .env —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –¥–ª—è chat_id –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã
	@echo "üîß –°–æ–∑–¥–∞–Ω–∏–µ .env –¥–ª—è –Ω–æ–≤–æ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã..."
	@echo "# AI Learning Platform - Chat ID –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞" > .env
	@echo "SECRET_KEY=your-secret-key-change-in-production" >> .env
	@echo "DEBUG=true" >> .env
	@echo "" >> .env
	@echo "# –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö" >> .env
	@echo "DATABASE_URL=postgresql://user:password@localhost:5432/ai_learning_platform" >> .env
	@echo "" >> .env
	@echo "# ü§ñ OpenAI API (–û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û!)" >> .env
	@echo "DEFAULT_OPENAI_API_KEY=sk-your-real-openai-api-key-here" >> .env
	@echo "DEFAULT_OPENAI_MODEL=gpt-4o-mini" >> .env
	@echo "DEFAULT_OPENAI_BASE_URL=https://api.openai.com/v1" >> .env
	@echo "" >> .env
	@echo "# JWT –Ω–∞—Å—Ç—Ä–æ–π–∫–∏" >> .env
	@echo "ACCESS_TOKEN_EXPIRE_MINUTES=30" >> .env
	@echo "ALGORITHM=HS256" >> .env
	@echo "" >> .env
	@echo "# CORS –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏" >> .env
	@echo 'CORS_ORIGINS=["http://localhost:3000", "http://127.0.0.1:3000"]' >> .env
	@echo "‚úÖ –§–∞–π–ª .env —Å–æ–∑–¥–∞–Ω"
	@echo "üîë –í–ê–ñ–ù–û: –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –≤–∞—à OpenAI API –∫–ª—é—á –≤ DEFAULT_OPENAI_API_KEY"

full-setup-new: ## –ü–æ–ª–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ —Å –Ω–æ–≤–æ–π chat_id –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–æ–π
	@echo "üöÄ –ü–æ–ª–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ —Å chat_id –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–æ–π..."
	$(MAKE) setup-new-env
	$(MAKE) frontend-install
	$(MAKE) install
	$(MAKE) db-reset-force
	@echo ""
	@echo "üéâ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!"
	@echo ""
	@echo "üìù –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:"
	@echo "1. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ OpenAI API –∫–ª—é—á –≤ .env —Ñ–∞–π–ª–µ"
	@echo "2. –ó–∞–ø—É—Å—Ç–∏—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ:"
	@echo "   make dev       # Backend"
	@echo "   make frontend-dev  # Frontend"
	@echo ""
	@echo "üåê –ü–æ—Å–ª–µ –∑–∞–ø—É—Å–∫–∞:"
	@echo "  Frontend: http://localhost:3000"
	@echo "  Backend:  http://localhost:8000"
	@echo "  API docs: http://localhost:8000/docs" 