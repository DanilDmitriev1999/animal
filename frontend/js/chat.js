import { elements } from './dom.js';

// Chat messages storage with limit
let chatMessages = [];
const MAX_MESSAGES = 10;

export function renderChatMessages() {
  if (elements.chatMessages) {
    elements.chatMessages.innerHTML = '';
    
    // Show only last 10 messages
    const displayMessages = chatMessages.slice(-MAX_MESSAGES);
    
    displayMessages.forEach(message => {
      const messageElement = createMessageElement(message);
      elements.chatMessages.appendChild(messageElement);
    });
    
    // Scroll to bottom
    elements.chatMessages.scrollTop = elements.chatMessages.scrollHeight;
  }
}

function createMessageElement(message) {
  const messageDiv = document.createElement('div');
  messageDiv.className = `chat-message ${message.sender}`;
  
  const avatarDiv = document.createElement('div');
  avatarDiv.className = `message-avatar ${message.sender === 'user' ? 'user' : ''}`;
  avatarDiv.textContent = message.sender === 'user' ? 'üë§' : 'ü§ñ';
  
  const contentDiv = document.createElement('div');
  contentDiv.className = `message-content ${message.sender === 'user' ? 'user' : ''}`;
  
  const textDiv = document.createElement('div');
  textDiv.className = 'message-text';
  textDiv.textContent = message.message;
  
  const timeDiv = document.createElement('div');
  timeDiv.className = 'message-time';
  timeDiv.textContent = message.timestamp || getCurrentTime();
  
  contentDiv.appendChild(textDiv);
  contentDiv.appendChild(timeDiv);
  
  messageDiv.appendChild(avatarDiv);
  messageDiv.appendChild(contentDiv);
  
  return messageDiv;
}

function getCurrentTime() {
  const now = new Date();
  return `${now.getHours().toString().padStart(2, '0')}:${now.getMinutes().toString().padStart(2, '0')}`;
}

export function openChatModal() {
  if (elements.chatModal) {
    elements.chatModal.classList.add('active');
    elements.chatModal.classList.add('fade-in');
    
    // Focus on input
    if (elements.chatMessageInput) {
      setTimeout(() => {
        elements.chatMessageInput.focus();
      }, 100);
    }
    
    // Load initial messages if empty
    if (chatMessages.length === 0) {
      loadInitialMessages();
    }
    
    renderChatMessages();
  }
}

export function closeChatModal() {
  if (elements.chatModal) {
    elements.chatModal.classList.remove('active');
    elements.chatModal.classList.remove('fade-in');
  }
}

function loadInitialMessages() {
  chatMessages = [
    {
      id: 1,
      sender: 'bot',
      message: '–ü—Ä–∏–≤–µ—Ç! –Ø –≤–∞—à AI-–Ω–∞—Å—Ç–∞–≤–Ω–∏–∫. –ì–æ—Ç–æ–≤—ã –∏–∑—É—á–∞—Ç—å JavaScript –æ–±—ä–µ–∫—Ç—ã?',
      timestamp: '10:30'
    },
    {
      id: 2,
      sender: 'user',
      message: '–î–∞, –¥–∞–≤–∞–π—Ç–µ –Ω–∞—á–Ω–µ–º!',
      timestamp: '10:31'
    },
    {
      id: 3,
      sender: 'bot',
      message: '–û—Ç–ª–∏—á–Ω–æ! –û–±—ä–µ–∫—Ç—ã –≤ JavaScript - —ç—Ç–æ –æ—Å–Ω–æ–≤–∞ –¥–ª—è –ø–æ–Ω–∏–º–∞–Ω–∏—è —Å–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è. –ù–∞—á–Ω–µ–º —Å –ø—Ä–æ—Å—Ç–æ–≥–æ –ø—Ä–∏–º–µ—Ä–∞.',
      timestamp: '10:31'
    }
  ];
}

export function sendChatMessage() {
  if (!elements.chatMessageInput) return;
  
  const messageText = elements.chatMessageInput.value.trim();
  if (!messageText) return;
  
  // Add user message
  const userMessage = {
    id: Date.now(),
    sender: 'user',
    message: messageText,
    timestamp: getCurrentTime()
  };
  
  chatMessages.push(userMessage);
  
  // Clear input
  elements.chatMessageInput.value = '';
  
  // Show typing indicator
  showTypingIndicator();
  
  // Simulate AI response
  setTimeout(() => {
    hideTypingIndicator();
    
    const aiResponse = {
      id: Date.now() + 1,
      sender: 'bot',
      message: generateAIResponse(messageText),
      timestamp: getCurrentTime()
    };
    
    chatMessages.push(aiResponse);
    
    // Keep only last MAX_MESSAGES
    if (chatMessages.length > MAX_MESSAGES) {
      chatMessages = chatMessages.slice(-MAX_MESSAGES);
    }
    
    renderChatMessages();
  }, 1500);
  
  renderChatMessages();
}

function generateAIResponse(userMessage) {
  const responses = [
    '–û—Ç–ª–∏—á–Ω—ã–π –≤–æ–ø—Ä–æ—Å! –î–∞–≤–∞–π—Ç–µ —Ä–∞–∑–±–µ—Ä–µ–º —ç—Ç–æ –ø–æ—à–∞–≥–æ–≤–æ.',
    '–ü–æ–Ω–∏–º–∞—é –≤–∞—à—É –∑–∞–¥–∞—á—É. –í–æ—Ç –∫–∞–∫ —ç—Ç–æ –º–æ–∂–Ω–æ —Ä–µ—à–∏—Ç—å...',
    '–≠—Ç–æ –≤–∞–∂–Ω–∞—è —Ç–µ–º–∞ –≤ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–∏. –ü–æ–∑–≤–æ–ª—å—Ç–µ –æ–±—ä—è—Å–Ω–∏—Ç—å...',
    '–•–æ—Ä–æ—à–∏–π –ø—Ä–∏–º–µ—Ä! –í–æ—Ç —á—Ç–æ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –≤ –∫–æ–¥–µ...',
    '–î–∞–≤–∞–π—Ç–µ –ø–æ–ø—Ä–æ–±—É–µ–º –¥—Ä—É–≥–æ–π –ø–æ–¥—Ö–æ–¥ –∫ —ç—Ç–æ–π –∑–∞–¥–∞—á–µ.',
    '–í—ã –Ω–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –ø—É—Ç–∏! –ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –≤ —Ç–æ–º –∂–µ –¥—É—Ö–µ.',
    '–ò–Ω—Ç–µ—Ä–µ—Å–Ω–æ–µ –Ω–∞–±–ª—é–¥–µ–Ω–∏–µ. –†–∞—Å—Å–º–æ—Ç—Ä–∏–º —ç—Ç–æ –ø–æ–¥—Ä–æ–±–Ω–µ–µ...',
    '–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø—Ä–∏–º–µ–Ω–∏—Ç—å —ç—Ç–æ –Ω–∞ –ø—Ä–∞–∫—Ç–∏–∫–µ.'
  ];
  
  return responses[Math.floor(Math.random() * responses.length)];
}

function showTypingIndicator() {
  if (elements.typingIndicator) {
    elements.typingIndicator.classList.add('active');
  }
}

function hideTypingIndicator() {
  if (elements.typingIndicator) {
    elements.typingIndicator.classList.remove('active');
  }
}

export function handleChatKeypress(e) {
  if (e.key === 'Enter' && !e.shiftKey) {
    e.preventDefault();
    sendChatMessage();
  }
}

export function handleOverlayChatKeypress(e) {
  if (e.key === 'Enter' && !e.shiftKey) {
    e.preventDefault();
    sendChatMessage();
  }
}

// Deprecated function names for compatibility
export function expandChatPanel() {
  openChatModal();
}

export function closeChatPanel() {
  closeChatModal();
}

export function toggleMicrophone() {
  console.log('Microphone feature not implemented yet');
} 