"""
–°–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å OpenAI API
"""
from openai import AsyncOpenAI
from typing import Dict, Any, Optional, List
import logging
from utils.config import settings

logger = logging.getLogger(__name__)

class OpenAIService:
    def __init__(self, api_key: str, base_url: str = None, model: str = None):
        self.api_key = api_key
        self.base_url = base_url or settings.default_openai_base_url
        self.model = model or settings.default_openai_model
        self.client = AsyncOpenAI(
            api_key=self.api_key,
            base_url=self.base_url
        )

    async def generate_welcome_plan_message(self, 
                                          skill_area: str, 
                                          user_expectations: str,
                                          difficulty_level: str,
                                          duration_hours: int) -> Dict[str, Any]:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–ª–∞–Ω–æ–º –∫—É—Ä—Å–∞"""

        prompt = f"""
        –ü—Ä–∏–≤–µ—Ç! –Ø —Ç–≤–æ–π AI-–ø–æ–º–æ—â–Ω–∏–∫ –¥–ª—è –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –æ–±—É—á–µ–Ω–∏—è. 

        –¢—ã —Å–æ–∑–¥–∞–ª —Ç—Ä–µ–∫ –ø–æ –∏–∑—É—á–µ–Ω–∏—é: **{skill_area}**

        –ù–∞ –æ—Å–Ω–æ–≤–µ —Ç–≤–æ–∏—Ö –¥–∞–Ω–Ω—ã—Ö:
        - –£—Ä–æ–≤–µ–Ω—å —Å–ª–æ–∂–Ω–æ—Å—Ç–∏: {difficulty_level}
        - –ü–ª–∞–Ω–∏—Ä—É–µ–º–æ–µ –≤—Ä–µ–º—è: {duration_hours} —á–∞—Å–æ–≤
        - –¢–≤–æ–∏ –æ–∂–∏–¥–∞–Ω–∏—è: {user_expectations}

        –Ø –ø–æ–¥–≥–æ—Ç–æ–≤–∏–ª –¥–ª—è —Ç–µ–±—è –¥–µ—Ç–∞–ª—å–Ω—ã–π –ø–ª–∞–Ω –æ–±—É—á–µ–Ω–∏—è! üìö

        ## üéØ –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º—ã–π –ø–ª–∞–Ω –∫—É—Ä—Å–∞:

        –°–æ–∑–¥–∞–π –∫—Ä–∞—Å–∏–≤—ã–π —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–ª–∞–Ω –∫—É—Ä—Å–∞ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º —ç–º–æ–¥–∑–∏ –∏ markdown —Ä–∞–∑–º–µ—Ç–∫–∏.
        –í–∫–ª—é—á–∏:
        1. **–¶–µ–ª–∏ –æ–±—É—á–µ–Ω–∏—è** (2-3 –æ—Å–Ω–æ–≤–Ω—ã–µ —Ü–µ–ª–∏)
        2. **–°—Ç—Ä—É–∫—Ç—É—Ä–∞ –∫—É—Ä—Å–∞** (4-6 –º–æ–¥—É–ª–µ–π —Å –Ω–∞–∑–≤–∞–Ω–∏—è–º–∏ –∏ –∫—Ä–∞—Ç–∫–∏–º –æ–ø–∏—Å–∞–Ω–∏–µ–º)
        3. **–ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–µ–∫—Ç—ã** (2-3 –ø—Ä–æ–µ–∫—Ç–∞ –¥–ª—è –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–∏—è)
        4. **–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –∏–∑—É—á–µ–Ω–∏—é**

        –í –∫–æ–Ω—Ü–µ —Å–ø—Ä–æ—Å–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:
        - –ù—Ä–∞–≤–∏—Ç—Å—è –ª–∏ –µ–º—É –ø–ª–∞–Ω?
        - –ß—Ç–æ —Ö–æ—Ç–µ–ª –±—ã –∏–∑–º–µ–Ω–∏—Ç—å –∏–ª–∏ –¥–æ–ø–æ–ª–Ω–∏—Ç—å?
        - –ì–æ—Ç–æ–≤ –ª–∏ —Ñ–∏–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –ø–ª–∞–Ω –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –º–æ–¥—É–ª–µ–π?

        –ò—Å–ø–æ–ª—å–∑—É–π –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π —Ç–æ–Ω, —ç–º–æ–¥–∑–∏ –∏ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—É—é –ø–æ–¥–∞—á—É –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏.
        """

        try:
            response = await self.client.chat.completions.create(
                model=self.model,
                messages=[
                    {"role": "system", "content": "–¢—ã –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π AI-–∫—É—Ä–∞—Ç–æ—Ä –æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω—ã—Ö –∫—É—Ä—Å–æ–≤. –°–æ–∑–¥–∞–µ—à—å –º–æ—Ç–∏–≤–∏—Ä—É—é—â–∏–µ –∏ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–ª–∞–Ω—ã –æ–±—É—á–µ–Ω–∏—è —Å –∫—Ä–∞—Å–∏–≤—ã–º –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ–º."},
                    {"role": "user", "content": prompt}
                ],
                temperature=0.8,
                max_tokens=1500
            )

            content = response.choices[0].message.content
            logger.info(f"Generated welcome plan message for {skill_area}")

            return {
                "success": True,
                "content": content,
                "tokens_used": response.usage.total_tokens
            }

        except Exception as e:
            logger.error(f"Error generating welcome plan message: {str(e)}")
            return {
                "success": False,
                "error": str(e)
            }

    async def generate_course_plan(self, 
                                 skill_area: str, 
                                 user_expectations: str,
                                 difficulty_level: str,
                                 duration_hours: int) -> Dict[str, Any]:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –ø–ª–∞–Ω –∫—É—Ä—Å–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø–æ–∂–µ–ª–∞–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""

        prompt = f"""
        –°–æ–∑–¥–∞–π –¥–µ—Ç–∞–ª—å–Ω—ã–π –ø–ª–∞–Ω –∫—É—Ä—Å–∞ –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è –Ω–∞–≤—ã–∫–∞: {skill_area}

        –ü–∞—Ä–∞–º–µ—Ç—Ä—ã:
        - –£—Ä–æ–≤–µ–Ω—å —Å–ª–æ–∂–Ω–æ—Å—Ç–∏: {difficulty_level}
        - –ü–ª–∞–Ω–∏—Ä—É–µ–º–∞—è –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {duration_hours} —á–∞—Å–æ–≤
        - –û–∂–∏–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user_expectations}

        –°–æ–∑–¥–∞–π —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–ª–∞–Ω –≤ JSON —Ñ–æ—Ä–º–∞—Ç–µ —Å–æ —Å–ª–µ–¥—É—é—â–∏–º–∏ —Ä–∞–∑–¥–µ–ª–∞–º–∏:
        1. –û–±—â–µ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∫—É—Ä—Å–∞
        2. –¶–µ–ª–∏ –æ–±—É—á–µ–Ω–∏—è
        3. –ú–æ–¥—É–ª–∏ –∫—É—Ä—Å–∞ (3-7 –º–æ–¥—É–ª–µ–π)
        4. –î–ª—è –∫–∞–∂–¥–æ–≥–æ –º–æ–¥—É–ª—è: –Ω–∞–∑–≤–∞–Ω–∏–µ, –æ–ø–∏—Å–∞–Ω–∏–µ, –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å, —Ç–µ–º—ã
        5. –ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ –∑–∞–¥–∞–Ω–∏—è
        6. –§–∏–Ω–∞–ª—å–Ω—ã–π –ø—Ä–æ–µ–∫—Ç

        –û—Ç–≤–µ—á–∞–π —Ç–æ–ª—å–∫–æ –≤ JSON —Ñ–æ—Ä–º–∞—Ç–µ –±–µ–∑ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞.
        """

        try:
            response = await self.client.chat.completions.create(
                model=self.model,
                messages=[
                    {"role": "system", "content": "–¢—ã —ç–∫—Å–ø–µ—Ä—Ç–Ω—ã–π –∫—É—Ä–∞—Ç–æ—Ä –æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω—ã—Ö –∫—É—Ä—Å–æ–≤. –°–æ–∑–¥–∞–µ—à—å –¥–µ—Ç–∞–ª—å–Ω—ã–µ –ø–ª–∞–Ω—ã –æ–±—É—á–µ–Ω–∏—è."},
                    {"role": "user", "content": prompt}
                ],
                temperature=0.7,
                max_tokens=2000
            )

            content = response.choices[0].message.content
            logger.info(f"Generated course plan for {skill_area}")

            return {
                "success": True,
                "content": content,
                "tokens_used": response.usage.total_tokens
            }

        except Exception as e:
            logger.error(f"Error generating course plan: {str(e)}")
            return {
                "success": False,
                "error": str(e)
            }

    async def generate_finalized_modules(self, 
                                       course_plan: str,
                                       skill_area: str) -> Dict[str, Any]:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ñ–∏–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –º–æ–¥—É–ª–∏ –∫—É—Ä—Å–∞ —Å –Ω–∞–∑–≤–∞–Ω–∏—è–º–∏ –∏ –æ–ø–∏—Å–∞–Ω–∏—è–º–∏"""

        prompt = f"""
–ù–∞ –æ—Å–Ω–æ–≤–µ –ø–ª–∞–Ω–∞ –∫—É—Ä—Å–∞ –ø–æ –∏–∑—É—á–µ–Ω–∏—é: {skill_area}

–ü–ª–∞–Ω –∫—É—Ä—Å–∞:
{course_plan}

–°–æ–∑–¥–∞–π JSON —Å–ø–∏—Å–æ–∫ –º–æ–¥—É–ª–µ–π –∫—É—Ä—Å–∞ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.

–í–ê–ñ–ù–û: –û—Ç–≤–µ—á–∞–π –¢–û–õ–¨–ö–û –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON –º–∞—Å—Å–∏–≤–∞, –±–µ–∑ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ –∏–ª–∏ —Ä–∞–∑–º–µ—Ç–∫–∏.

–§–æ—Ä–º–∞—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Ç–æ—á–Ω–æ —Ç–∞–∫–æ–π:
[
  {{
    "module_number": 1,
    "title": "–ù–∞–∑–≤–∞–Ω–∏–µ –º–æ–¥—É–ª—è",
    "description": "–ö—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –º–æ–¥—É–ª—è (2-3 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è)",
    "estimated_duration_hours": 5,
    "learning_objectives": ["–¶–µ–ª—å 1", "–¶–µ–ª—å 2", "–¶–µ–ª—å 3"],
    "status": "not_started"
  }},
  {{
    "module_number": 2,
    "title": "–°–ª–µ–¥—É—é—â–∏–π –º–æ–¥—É–ª—å",
    "description": "–û–ø–∏—Å–∞–Ω–∏–µ —Å–ª–µ–¥—É—é—â–µ–≥–æ –º–æ–¥—É–ª—è",
    "estimated_duration_hours": 6,
    "learning_objectives": ["–¶–µ–ª—å 1", "–¶–µ–ª—å 2"],
    "status": "not_started"
  }}
]

–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è:
- –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–æ–¥—É–ª–µ–π: 4-6
- –ú–æ–¥—É–ª–∏ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –ª–æ–≥–∏—á–µ—Å–∫–∏ —Å–≤—è–∑–∞–Ω—ã –∏ –ø–æ–∫—Ä—ã–≤–∞—Ç—å –≤–µ—Å—å –ø–ª–∞–Ω –æ–±—É—á–µ–Ω–∏—è
- –ö–∞–∂–¥—ã–π –º–æ–¥—É–ª—å –¥–æ–ª–∂–µ–Ω –∏–º–µ—Ç—å –≤—Å–µ —É–∫–∞–∑–∞–Ω–Ω—ã–µ –ø–æ–ª—è
- estimated_duration_hours –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —á–∏—Å–ª–æ–º –æ—Ç 3 –¥–æ 12
- learning_objectives - –º–∞—Å—Å–∏–≤ —Å—Ç—Ä–æ–∫ —Å 2-4 —Ü–µ–ª—è–º–∏
- status –≤—Å–µ–≥–¥–∞ "not_started"
- –û—Ç–≤–µ—á–∞–π —Ç–æ–ª—å–∫–æ JSON, –±–µ–∑ ```json``` –∏–ª–∏ –¥—Ä—É–≥–∏—Ö –æ–±—ë—Ä—Ç–æ–∫
"""

        try:
            response = await self.client.chat.completions.create(
                model=self.model,
                messages=[
                    {"role": "system", "content": "–¢—ã —Å–æ–∑–¥–∞–µ—à—å —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –º–æ–¥—É–ª–∏ –∫—É—Ä—Å–æ–≤ —Å—Ç—Ä–æ–≥–æ –≤ JSON —Ñ–æ—Ä–º–∞—Ç–µ. –û—Ç–≤–µ—á–∞–π —Ç–æ–ª—å–∫–æ –≤–∞–ª–∏–¥–Ω—ã–º JSON –º–∞—Å—Å–∏–≤–æ–º –±–µ–∑ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞."},
                    {"role": "user", "content": prompt}
                ],
                temperature=0.3,  # –ù–∏–∑–∫–∞—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –¥–ª—è –±–æ–ª–µ–µ —Å—Ç–∞–±–∏–ª—å–Ω–æ–≥–æ JSON
                max_tokens=1500
            )

            content = response.choices[0].message.content.strip()
            
            # –û—á–∏—â–∞–µ–º –≤–æ–∑–º–æ–∂–Ω—ã–µ markdown –æ–±—ë—Ä—Ç–∫–∏
            if content.startswith('```'):
                content = content.split('\n', 1)[1]
            if content.endswith('```'):
                content = content.rsplit('\n', 1)[0]
            content = content.strip()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —ç—Ç–æ –≤–∞–ª–∏–¥–Ω—ã–π JSON
            import json
            try:
                parsed_modules = json.loads(content)
                if not isinstance(parsed_modules, list):
                    raise ValueError("Response is not a JSON array")
                
                # –í–∞–ª–∏–¥–∏—Ä—É–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –∫–∞–∂–¥–æ–≥–æ –º–æ–¥—É–ª—è
                for i, module in enumerate(parsed_modules):
                    if not isinstance(module, dict):
                        raise ValueError(f"Module {i} is not a JSON object")
                    
                    required_fields = ["module_number", "title", "description", "estimated_duration_hours", "learning_objectives", "status"]
                    for field in required_fields:
                        if field not in module:
                            module[field] = self._get_default_field_value(field, i + 1)
                
                logger.info(f"Generated {len(parsed_modules)} finalized modules for {skill_area}")
                
                return {
                    "success": True,
                    "content": json.dumps(parsed_modules, ensure_ascii=False, indent=2),
                    "tokens_used": response.usage.total_tokens
                }
                
            except (json.JSONDecodeError, ValueError) as e:
                logger.error(f"Invalid JSON in AI response: {e}")
                logger.error(f"AI response content: {content[:500]}...")
                
                # Fallback: —Å–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤—ã–µ –º–æ–¥—É–ª–∏
                fallback_modules = self._create_fallback_modules(skill_area, course_plan)
                return {
                    "success": True,
                    "content": json.dumps(fallback_modules, ensure_ascii=False, indent=2),
                    "tokens_used": response.usage.total_tokens,
                    "warning": "Used fallback modules due to JSON parsing error"
                }

        except Exception as e:
            logger.error(f"Error generating finalized modules: {str(e)}")
            
            # Fallback: —Å–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤—ã–µ –º–æ–¥—É–ª–∏
            fallback_modules = self._create_fallback_modules(skill_area, course_plan)
            return {
                "success": True,
                "content": json.dumps(fallback_modules, ensure_ascii=False, indent=2),
                "tokens_used": 0,
                "warning": f"Used fallback modules due to error: {str(e)}"
            }
    
    def _get_default_field_value(self, field: str, module_number: int):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–ª—è –ø–æ–ª—è –º–æ–¥—É–ª—è"""
        defaults = {
            "module_number": module_number,
            "title": f"–ú–æ–¥—É–ª—å {module_number}",
            "description": "–û–ø–∏—Å–∞–Ω–∏–µ –º–æ–¥—É–ª—è",
            "estimated_duration_hours": 5,
            "learning_objectives": ["–ò–∑—É—á–µ–Ω–∏–µ –æ—Å–Ω–æ–≤", "–ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ –Ω–∞–≤—ã–∫–∏"],
            "status": "not_started"
        }
        return defaults.get(field, "")
    
    def _create_fallback_modules(self, skill_area: str, course_plan: str):
        """–°–æ–∑–¥–∞–µ—Ç –±–∞–∑–æ–≤—ã–µ –º–æ–¥—É–ª–∏ –∫–∞–∫ fallback"""
        modules = []
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –∫–ª—é—á–µ–≤—ã–µ —Ç–µ–º—ã –∏–∑ –ø–ª–∞–Ω–∞
        plan_lines = course_plan.split('\n')
        topics = []
        for line in plan_lines:
            line = line.strip()
            if line and (line.startswith('-') or line.startswith('‚Ä¢') or line.startswith('*')):
                topic = line[1:].strip()
                if len(topic) > 5 and len(topic) < 100:
                    topics.append(topic)
        
        # –°–æ–∑–¥–∞–µ–º –º–æ–¥—É–ª–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–µ–º –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º –±–∞–∑–æ–≤—ã–µ
        if len(topics) >= 3:
            selected_topics = topics[:min(5, len(topics))]
        else:
            selected_topics = [
                f"–í–≤–µ–¥–µ–Ω–∏–µ –≤ {skill_area}",
                f"–û—Å–Ω–æ–≤—ã {skill_area}",
                f"–ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–æ–µ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ",
                f"–ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–µ —Ç–µ—Ö–Ω–∏–∫–∏",
                f"–§–∏–Ω–∞–ª—å–Ω—ã–π –ø—Ä–æ–µ–∫—Ç"
            ]
        
        for i, topic in enumerate(selected_topics):
            modules.append({
                "module_number": i + 1,
                "title": topic,
                "description": f"–ò–∑—É—á–µ–Ω–∏–µ —Ç–µ–º—ã: {topic}. –ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ –∑–∞–¥–∞–Ω–∏—è –∏ —Ç–µ–æ—Ä–µ—Ç–∏—á–µ—Å–∫–∏–π –º–∞—Ç–µ—Ä–∏–∞–ª.",
                "estimated_duration_hours": 5 + (i % 3),  # 5-7 —á–∞—Å–æ–≤
                "learning_objectives": [
                    f"–ü–æ–Ω–∏–º–∞–Ω–∏–µ {topic.lower()}",
                    "–ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ –Ω–∞–≤—ã–∫–∏",
                    "–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –∑–Ω–∞–Ω–∏–π"
                ],
                "status": "not_started"
            })
        
        return modules

    async def generate_chat_response(self, 
                                   messages: List[Dict[str, str]], 
                                   context: str = None) -> Dict[str, Any]:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ—Ç–≤–µ—Ç –≤ —á–∞—Ç–µ –¥–ª—è –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –∫—É—Ä—Å–∞"""

        system_prompt = """
        –¢—ã –ø–æ–º–æ—â–Ω–∏–∫ –¥–ª—è –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω—ã—Ö –∫—É—Ä—Å–æ–≤. 
        –ü–æ–º–æ–≥–∞–µ—à—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º —Å–æ–∑–¥–∞–≤–∞—Ç—å –∏ –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–ª–∞–Ω—ã –æ–±—É—á–µ–Ω–∏—è.

        –¢–≤–æ–∏ –∑–∞–¥–∞—á–∏:
        1. –û–±—Å—É–∂–¥–∞—Ç—å –¥–µ—Ç–∞–ª–∏ –∫—É—Ä—Å–∞ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
        2. –ü—Ä–µ–¥–ª–∞–≥–∞—Ç—å —É–ª—É—á—à–µ–Ω–∏—è –∏ –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∏
        3. –û—Ç–≤–µ—á–∞—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –æ —Å—Ç—Ä—É–∫—Ç—É—Ä–µ –∫—É—Ä—Å–∞
        4. –ü–æ–º–æ–≥–∞—Ç—å —Ñ–∏–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –ø–ª–∞–Ω

        –ë—É–¥—å –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–º, –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–∏–≤–Ω—ã–º –∏ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–º.
        """

        if context:
            system_prompt += f"\n\n–ö–æ–Ω—Ç–µ–∫—Å—Ç –∫—É—Ä—Å–∞: {context}"

        try:
            full_messages = [{"role": "system", "content": system_prompt}] + messages

            response = await self.client.chat.completions.create(
                model=self.model,
                messages=full_messages,
                temperature=0.8,
                max_tokens=1000
            )

            content = response.choices[0].message.content

            return {
                "success": True,
                "content": content,
                "tokens_used": response.usage.total_tokens
            }

        except Exception as e:
            logger.error(f"Error generating chat response: {str(e)}")
            return {
                "success": False,
                "error": str(e)
            }

    async def generate_lesson_content(self, 
                                    lesson_title: str,
                                    module_context: str,
                                    content_type: str) -> Dict[str, Any]:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∫–æ–Ω—Ç–µ–Ω—Ç –¥–ª—è —É—Ä–æ–∫–∞"""

        prompt = f"""
        –°–æ–∑–¥–∞–π {content_type} –¥–ª—è —É—Ä–æ–∫–∞ "{lesson_title}"

        –ö–æ–Ω—Ç–µ–∫—Å—Ç –º–æ–¥—É–ª—è: {module_context}

        –¢—Ä–µ–±–æ–≤–∞–Ω–∏—è:
        - –°—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –º–∞—Ç–µ—Ä–∏–∞–ª
        - –ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–∏–º–µ—Ä—ã  
        - –ß–µ—Ç–∫–∏–µ –æ–±—ä—è—Å–Ω–µ–Ω–∏—è
        - –ó–∞–¥–∞–Ω–∏—è –¥–ª—è –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–∏—è (–µ—Å–ª–∏ –ø—Ä–∏–º–µ–Ω–∏–º–æ)

        –§–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞: markdown
        """

        try:
            response = await self.client.chat.completions.create(
                model=self.model,
                messages=[
                    {"role": "system", "content": "–¢—ã –æ–ø—ã—Ç–Ω—ã–π –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å, —Å–æ–∑–¥–∞—é—â–∏–π –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã."},
                    {"role": "user", "content": prompt}
                ],
                temperature=0.6,
                max_tokens=1500
            )

            content = response.choices[0].message.content

            return {
                "success": True,
                "content": content,
                "tokens_used": response.usage.total_tokens
            }

        except Exception as e:
            logger.error(f"Error generating lesson content: {str(e)}")
            return {
                "success": False,
                "error": str(e)
            }

# –§–∞–±—Ä–∏–∫–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è OpenAI —Å–µ—Ä–≤–∏—Å–∞
async def create_openai_service(user_id: str) -> Optional[OpenAIService]:
    """–°–æ–∑–¥–∞–µ—Ç OpenAI —Å–µ—Ä–≤–∏—Å –Ω–∞ –æ—Å–Ω–æ–≤–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    # –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ª–æ–≥–∏–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ AI –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –ë–î
    # –î–ª—è –ø—Ä–∏–º–µ—Ä–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é

    api_key = settings.default_openai_api_key
    if not api_key:
        logger.error("OpenAI API key not configured")
        return None

    return OpenAIService(
        api_key=api_key,
        base_url=settings.default_openai_base_url,
        model=settings.default_openai_model
    )
